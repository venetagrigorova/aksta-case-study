income_levels <- unique(income_status_df$income)
# Initialize a list to store summary rows
summary_list <- list()
# Loop through each income level
for (inc in income_levels) {
group_data <- subset(income_status_df, income_status_df$income == inc)
summary_row <- list(income = inc)
# Compute average and median for each metric
for (metric in metrics) {
avg_val <- mean(group_data[[metric]], na.rm = TRUE)
med_val <- median(group_data[[metric]], na.rm = TRUE)
summary_row[[paste0("average_", metric)]] <- avg_val
summary_row[[paste0("median_", metric)]] <- med_val
}
# Append the row to the list
summary_list[[inc]] <- as.data.frame(summary_row)
}
# Combine all summaries into a single data frame
income_summary_df <- do.call(rbind, summary_list)
rownames(income_summary_df) <- NULL  # Clean row names
# View the result
print(income_summary_df)
# Define metrics and income levels
income_groups <- list(
"Low income" = subset(income_status_df, income == "Low income"),
"Lower middle income" = subset(income_status_df, income == "Lower middle income"),
"Upper middle income" = subset(income_status_df, income == "Upper middle income"),
"High income" = subset(income_status_df, income == "High income"),
"Not classified" = subset(income_status_df, income == "Not classified")
)
# Store results
variability_summary <- data.frame()
# Loop through each group and compute SD and IQR
for (name in names(income_groups)) {
group <- income_groups[[name]]
row <- list(income = name)
for (metric in metrics) {
sd_val <- sd(group[[metric]], na.rm = TRUE)
iqr_val <- IQR(group[[metric]], na.rm = TRUE)
row[[paste0("sd_", metric)]] <- sd_val
row[[paste0("iqr_", metric)]] <- iqr_val
}
variability_summary <- rbind(variability_summary, as.data.frame(row))
}
# View the results
print(variability_summary)
# Initialize an empty data frame to store the results
extended_variability_summary <- data.frame()
# Loop through each combination of income status and continent
for (income_name in unique(income_status_df$income)) {
for (continent_name in unique(income_status_df$continent)) {
# Subset the data for the current income and continent
group <- subset(income_status_df, income == income_name & continent == continent_name)
# Initialize the row with the income and continent
row <- list(income = income_name, continent = continent_name)
# Loop through the metrics (assuming 'metrics' is already defined as the columns you want to compute stats for)
for (metric in metrics) {
# Calculate the median and IQR for the current metric
median_val <- median(group[[metric]], na.rm = TRUE)
iqr_val <- IQR(group[[metric]], na.rm = TRUE)
# Add the computed values to the row
row[[paste0("median_", metric)]] <- median_val
row[[paste0("iqr_", metric)]] <- iqr_val
}
# Append the row to the summary data frame
extended_variability_summary <- rbind(extended_variability_summary, as.data.frame(row))
}
}
extended_variability_summary
income_sort_map <- c(
"Not classified" = 5,
"Low income" = 1,
"Lower middle income" = 2,
"Upper middle income" = 3,
"High income" = 4
)
extended_variability_summary$income_rank <- income_sort_map[extended_variability_summary$income]
extended_variability_summary <-extended_variability_summary[order(extended_variability_summary$income_rank),]
long_format <- pivot_longer(
extended_variability_summary,
cols = -c(income, continent, income_rank),
names_to = "metric_stat",
values_to = "value"
)
print(long_format)
wide_format <- pivot_wider(
long_format,
names_from = metric_stat,
values_from = value
)
print(wide_format)
# Filter to include only rows where both metrics exist
filtered_df <- income_status_df %>%
filter(!is.na(youth_unemployment), !is.na(net_migration))
# Compute thresholds for each continent
quantile_df <- filtered_df %>%
group_by(continent) %>%
mutate(
net_migration_75 = quantile(net_migration, 0.75, na.rm = TRUE),
youth_unemp_25 = quantile(youth_unemployment, 0.25, na.rm = TRUE)
)
# Select countries above 75th percentile for net migration and below 25th percentile for youth unemployment
top_performers <- quantile_df %>%
filter(
net_migration >= net_migration_75,
youth_unemployment <= youth_unemp_25
) %>%
select(country, continent, youth_unemployment, net_migration)
# View the result
print(top_performers)
#probability that a country is european
prob_european_country <- length(unique(european_countries$country))/length(df_vars$country) #num of european countries divided by the total number of countries in our dataset
prob_european_country
#calculcating prior probability that a country belongs to the high income group
prior_probability_high_income <- nrow(df_vars[df_vars$income == "High income",]) / length(df_vars$country)
prior_probability_high_income
european_countries <- df_vars[df_vars$continent == "Europe",]
european_countries_high_income_prob <- european_countries[european_countries$income == "High income",]
#calculating the probability that the country belongs to a high income group given that the country is european
posterior_prob <- (prob_european_country * (nrow(european_countries_high_income)/nrow(european_countries)) / prior_probability_high_income)
posterior_prob
#probability that the country has high youth unemployment rate
high_youth_unemployment <- df_vars[df_vars$youth_unemployment > 25, ]
high_youth_unemployment
#probability that the country has high youth unemployment rate
high_youth_unemployment <- df_vars[df_vars$youth_unemployment > 25, ]
prior <- nrow(high_youth_unemployment)/length(df_vars$country)
# Countries with high youth unemployment
high_unemp <- df_vars[df_vars$youth_unemployment > 25, ]
# Number of such countries
n_high_unemp <- nrow(high_unemp)
# Among those, how many have negative net migration
n_negative_migration_given_high_unemp <- nrow(high_unemp[high_unemp$net_migration < 0, ])
# Conditional probability
prob_negative_migration_given_high_unemp <- n_negative_migration_given_high_unemp / n_high_unemp
# Output
prob_negative_migration_given_high_unemp
#likelihood that
n_negative_migration_given_high_unemp <- nrow(high_youth_unemployment[high_youth_unemployment$net_migration < 0, ])
n_negative_migration_given_high_unemp*high_youth_unemployment
n_negative_migration_given_high_unemp*prior
# Countries with high youth unemployment
high_unemp <- df_vars[df_vars$youth_unemployment > 25, ]
# Number of such countries
n_high_unemp <- nrow(high_unemp)
# Among those, how many have negative net migration
n_negative_migration_given_high_unemp <- nrow(high_unemp[high_unemp$net_migration < 0, ])
# Conditional probability
prob_negative_migration_given_high_unemp <- n_negative_migration_given_high_unemp / n_high_unemp
# Output
prob_negative_migration_given_high_unemp
# Countries with high youth unemployment
high_unemp <- df_vars[df_vars$youth_unemployment > 25, ]
# Number of such countries
n_high_unemp <- nrow(high_unemp)
# Among those, how many have negative net migration
n_negative_migration_given_high_unemp <- nrow(high_unemp[high_unemp$net_migration < 0, ])
# Conditional probability
prob_negative_migration_given_high_unemp <- (n_negative_migration_given_high_unemp * high_unemp/length(df_vars$country)) / n_high_unemp
# Countries with high youth unemployment
high_unemp <- df_vars[df_vars$youth_unemployment > 25, ]
# Number of such countries
n_high_unemp <- nrow(high_unemp)
# Among those, how many have negative net migration
n_negative_migration_given_high_unemp <- nrow(high_unemp[high_unemp$net_migration < 0, ])
# Conditional probability
prob_negative_migration_given_high_unemp <- ((n_negative_migration_given_high_unemp * (high_unemp/length(df_vars$country)) / n_high_unemp)
# Output
prob_negative_migration_given_high_unemp
# Countries with high youth unemployment
high_unemp <- df_vars[df_vars$youth_unemployment > 25, ]
# Number of such countries
n_high_unemp <- nrow(high_unemp)
# Among those, how many have negative net migration
n_negative_migration_given_high_unemp <- nrow(high_unemp[high_unemp$net_migration < 0, ])
# Conditional probability
prob_negative_migration_given_high_unemp <- ((n_negative_migration_given_high_unemp * (high_unemp/length(df_vars$country))) / n_high_unemp)
# Countries with high youth unemployment
high_unemp <- df_vars[df_vars$youth_unemployment > 25, ]
# Number of such countries
n_high_unemp <- nrow(high_unemp)
# Among those, how many have negative net migration
n_negative_migration_given_high_unemp <- nrow(high_unemp[high_unemp$net_migration < 0, ])
# Conditional probability
prob_negative_migration_given_high_unemp <- ((n_negative_migration_given_high_unemp * (nrow(high_unemp)/length(df_vars$country))) / n_high_unemp)
# Output
prob_negative_migration_given_high_unemp
aggregate_overall <- aggregate(youth_unemployment ~ income, df_vars, mean, na.rm = TRUE)
print(aggregate_overall)
aggregate_by_continent <- aggregate(youth_unemployment ~ income + continent, df_vars, mean, na.rm = TRUE)
print(aggregate_by_continent)
library(ggplot2)
ggplot(df_vars, aes(x = income, y = youth_unemployment)) +
geom_boxplot() +
facet_wrap(~ continent) +
theme_minimal() +
labs(title = "Youth Unemployment by Income Group across Continents")
# Export to CSV without row names
write.csv(df_vars,
file='/Users/jurajsimkovic/Documents/TU/SS25/AKSTA_StatComp/aksta-case-study/case-study-2/data/final_df.csv',
row.names=FALSE,
sep=';',
na='.')
# Export to CSV without row names
write.table(df_vars,
file='/Users/jurajsimkovic/Documents/TU/SS25/AKSTA_StatComp/aksta-case-study/case-study-2/data/final_df.csv',
row.names=FALSE,
col.names=TRUE,
sep=';',
na='.',
quote=FALSE)
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(tidyr)
library(readr)
library(stringr)
library(countrycode)
library(readxl)
library(readr)
library(stringi)
# education expenditure
edu_raw <- readLines("data/rawdata_369.txt")[-(1:2)]  # skip first 2 lines
edu_df <- read.table(text = edu_raw, sep = "", fill = TRUE, strip.white = TRUE,
stringsAsFactors = FALSE, header = FALSE)
head(edu_df)
# parse education data
edu_parsed <- str_match(edu_raw, "^(\\d+)\\s+(.+?)\\s+(\\d+\\.\\d+)\\s+(\\d{4})$")
# convert to clean data frame
edu_df_clean <- data.frame(
country = edu_parsed[, 3],
expenditure = as.numeric(edu_parsed[, 4]),
stringsAsFactors = FALSE
)
edu_df_clean
# net migration rate
mig_raw <- readLines("data/rawdata_347.txt")[-(1:2)]
# use regex to extract rank, country, migration rate, and year
mig_parsed <- str_match(mig_raw, "^(\\d+)\\s+(.+?)\\s+(-?\\d+\\.\\d+)\\s+(\\d{4})")
# build clean df
mig_df_clean <- data.frame(
country = mig_parsed[, 3],
net_migration = as.numeric(mig_parsed[, 4]),
stringsAsFactors = FALSE
)
mig_df_clean
# rename columns for consistency
unemp_df_clean <- read_csv("data/rawdata_373.csv") %>%
select(country = country_name,
youth_unemployment = youth_unempl_rate)
unemp_df_clean
library(dplyr)
# full join education and unemployment
df_merge1 <- full_join(edu_df_clean, unemp_df_clean, by = "country")
# join net migration
df_all <- full_join(df_merge1, mig_df_clean, by = "country")
dim(df_all)
head(df_all)
# patch country names before standardization
df_all <- df_all %>%
mutate(
country = case_when(
country == "Saint Martin" ~ "St. Martin (French part)",
country == "Virgin Islands" ~ "British Virgin Islands",
TRUE ~ country
)
)
# use countrycode to standardize names and get ISO-3 codes
df_all_iso <- df_all %>%
mutate(
country_standard = countrycode(country, origin = "country.name", destination = "country.name"),
iso3c = countrycode(country, origin = "country.name", destination = "iso3c")
) %>%
mutate(
iso3c = case_when(
country == "Kosovo" ~ "XKX",
country == "Venezuela" ~ "VEN",
country == "St. Martin (French part)" ~ "MAF",
country == "British Virgin Islands" ~ "VGB",
TRUE ~ iso3c
)
)
# load income classification (World Bank)
income_df <- read_excel("data/CLASS.xlsx", sheet = 1) %>%
select(country = Economy,
iso_code = Code,
income = `Income group`) %>%
mutate(iso_code = str_trim(iso_code))
# join income classification using ISO-3 codes
df_all_income <- df_all_iso %>%
left_join(income_df, by = c("iso3c" = "iso_code"))
# mark unmatched income classifications
df_all_income <- df_all_income %>%
mutate(income = ifelse(is.na(income), "Not classified", income))
df_all_income
df_all_income_clean <- df_all_income %>%
select(
country = country_standard,     # clean country name
iso = iso3c,                    # standard ISO code
income,                         # World Bank income classification
expenditure,
youth_unemployment,
net_migration
)
df_all_income_clean
glimpse(df_all_income_clean)
# load continent mapping
continent_data <- read.csv("data/countryContinent.csv")
names(continent_data)
# load continent info and rename relevant columns
continent_data <- read.csv("data/countryContinent.csv") %>%
select(
iso = code_3,
continent,
region = sub_region
) %>%
mutate(iso = str_trim(iso))
# merge with cleaned dataset using ISO-3
df_vars <- df_all_income_clean %>%
left_join(continent_data, by = "iso")
df_vars
# look for unmatched
df_vars %>%
filter(is.na(continent)) %>%
select(country, iso) %>%
distinct()
# patch Kosovo region and continent
df_vars <- df_vars %>%
mutate(
continent = ifelse(iso == "XKX", "Europe", continent),
region = ifelse(iso == "XKX", "Southern Europe", region)
)
glimpse(df_vars)
# absolute frequency
table(df_vars$income)
# relative frequency
prop.table(table(df_vars$income))
# absolute counts
table(df_vars$continent, df_vars$income)
# relative frequencies (row-wise proportions)
prop.table(table(df_vars$continent, df_vars$income), margin = 1)
# find unique income group within each continent
df_vars %>%
filter(income != "Not classified") %>%
group_by(continent, income) %>%
filter(n() == 1) %>%
select(country, continent, income) %>%
arrange(continent, income)
# find rare income groups within each continent
df_vars %>%
filter(income != "Not classified") %>%
group_by(continent, income) %>%
filter(n() <= 5) %>%
select(country, continent, income) %>%
arrange(continent, income)
df_vars
income_status_df <- df_vars[c("income","country","expenditure", "youth_unemployment", "net_migration", "continent")]
income_status_df
income_sort_map <- c(
"Not classified" = 5,
"Low income" = 1,
"Lower middle income" = 2,
"Upper middle income" = 3,
"High income" = 4
)
income_status_df$income_rank <- income_sort_map[income_status_df$income]
income_status_df <- income_status_df[order(income_status_df$income_rank),]
income_status_df
# Define the metrics and groups
metrics <- c("expenditure", "youth_unemployment", "net_migration")
income_levels <- unique(income_status_df$income)
# Initialize a list to store summary rows
summary_list <- list()
# Loop through each income level
for (inc in income_levels) {
group_data <- subset(income_status_df, income_status_df$income == inc)
summary_row <- list(income = inc)
# Compute average and median for each metric
for (metric in metrics) {
avg_val <- mean(group_data[[metric]], na.rm = TRUE)
med_val <- median(group_data[[metric]], na.rm = TRUE)
summary_row[[paste0("average_", metric)]] <- avg_val
summary_row[[paste0("median_", metric)]] <- med_val
}
# Append the row to the list
summary_list[[inc]] <- as.data.frame(summary_row)
}
# Combine all summaries into a single data frame
income_summary_df <- do.call(rbind, summary_list)
rownames(income_summary_df) <- NULL  # Clean row names
# View the result
print(income_summary_df)
# Define metrics and income levels
income_groups <- list(
"Low income" = subset(income_status_df, income == "Low income"),
"Lower middle income" = subset(income_status_df, income == "Lower middle income"),
"Upper middle income" = subset(income_status_df, income == "Upper middle income"),
"High income" = subset(income_status_df, income == "High income"),
"Not classified" = subset(income_status_df, income == "Not classified")
)
# Store results
variability_summary <- data.frame()
# Loop through each group and compute SD and IQR
for (name in names(income_groups)) {
group <- income_groups[[name]]
row <- list(income = name)
for (metric in metrics) {
sd_val <- sd(group[[metric]], na.rm = TRUE)
iqr_val <- IQR(group[[metric]], na.rm = TRUE)
row[[paste0("sd_", metric)]] <- sd_val
row[[paste0("iqr_", metric)]] <- iqr_val
}
variability_summary <- rbind(variability_summary, as.data.frame(row))
}
# View the results
print(variability_summary)
# Initialize an empty data frame to store the results
extended_variability_summary <- data.frame()
# Loop through each combination of income status and continent
for (income_name in unique(income_status_df$income)) {
for (continent_name in unique(income_status_df$continent)) {
# Subset the data for the current income and continent
group <- subset(income_status_df, income == income_name & continent == continent_name)
# Initialize the row with the income and continent
row <- list(income = income_name, continent = continent_name)
# Loop through the metrics (assuming 'metrics' is already defined as the columns you want to compute stats for)
for (metric in metrics) {
# Calculate the median and IQR for the current metric
median_val <- median(group[[metric]], na.rm = TRUE)
iqr_val <- IQR(group[[metric]], na.rm = TRUE)
# Add the computed values to the row
row[[paste0("median_", metric)]] <- median_val
row[[paste0("iqr_", metric)]] <- iqr_val
}
# Append the row to the summary data frame
extended_variability_summary <- rbind(extended_variability_summary, as.data.frame(row))
}
}
extended_variability_summary
income_sort_map <- c(
"Not classified" = 5,
"Low income" = 1,
"Lower middle income" = 2,
"Upper middle income" = 3,
"High income" = 4
)
extended_variability_summary$income_rank <- income_sort_map[extended_variability_summary$income]
extended_variability_summary <-extended_variability_summary[order(extended_variability_summary$income_rank),]
long_format <- pivot_longer(
extended_variability_summary,
cols = -c(income, continent, income_rank),
names_to = "metric_stat",
values_to = "value"
)
print(long_format)
wide_format <- pivot_wider(
long_format,
names_from = metric_stat,
values_from = value
)
print(wide_format)
# Filter to include only rows where both metrics exist
filtered_df <- income_status_df %>%
filter(!is.na(youth_unemployment), !is.na(net_migration))
# Compute thresholds for each continent
quantile_df <- filtered_df %>%
group_by(continent) %>%
mutate(
net_migration_75 = quantile(net_migration, 0.75, na.rm = TRUE),
youth_unemp_25 = quantile(youth_unemployment, 0.25, na.rm = TRUE)
)
# Select countries above 75th percentile for net migration and below 25th percentile for youth unemployment
top_performers <- quantile_df %>%
filter(
net_migration >= net_migration_75,
youth_unemployment <= youth_unemp_25
) %>%
select(country, continent, youth_unemployment, net_migration)
# View the result
print(top_performers)
european_countries <- df_vars[df_vars$continent == "Europe",]
#probability that a country is european
prob_european_country <- length(unique(european_countries$country))/length(df_vars$country) #num of european countries divided by the total number of countries in our dataset
prob_european_country
#calculcating prior probability that a country belongs to the high income group
prior_probability_high_income <- nrow(df_vars[df_vars$income == "High income",]) / length(df_vars$country)
prior_probability_high_income
european_countries_high_income_prob <- european_countries[european_countries$income == "High income",]
#calculating the probability that the country belongs to a high income group given that the country is european
posterior_prob <- (prob_european_country * (nrow(european_countries_high_income)/nrow(european_countries)) / prior_probability_high_income)
posterior_prob
# Countries with high youth unemployment
high_unemp <- df_vars[df_vars$youth_unemployment > 25, ]
# Number of such countries
n_high_unemp <- nrow(high_unemp)
# Among those, how many have negative net migration
n_negative_migration_given_high_unemp <- nrow(high_unemp[high_unemp$net_migration < 0, ])
# Conditional probability
prob_negative_migration_given_high_unemp <- ((n_negative_migration_given_high_unemp * (nrow(high_unemp)/length(df_vars$country))) / n_high_unemp)
# Output
prob_negative_migration_given_high_unemp
aggregate_overall <- aggregate(youth_unemployment ~ income, df_vars, mean, na.rm = TRUE)
print(aggregate_overall)
aggregate_by_continent <- aggregate(youth_unemployment ~ income + continent, df_vars, mean, na.rm = TRUE)
print(aggregate_by_continent)
# Export to CSV without row names
write.table(df_vars,
file='/Users/jurajsimkovic/Documents/TU/SS25/AKSTA_StatComp/aksta-case-study/case-study-2/data/final_df.csv',
row.names=FALSE,
col.names=TRUE,
sep=';',
na='.',
quote=FALSE)
